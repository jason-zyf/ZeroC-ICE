// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `book.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.ice.book.slice2java.book;

public abstract class _OnlineBookDisp extends Ice.ObjectImpl implements OnlineBook
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws CloneNotSupportedException
    {
        throw new CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",  // 所有的Ice Object都有此ID
        "::book::OnlineBook" // 这是OnlineBook这个Object的真正ID
    };

    // 永安里查找是否是某个远程对象，采用二分法
    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    { // 默认的ID，是"::book::OnlineBook"
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final Message bookTick(Message msg)
    {
        return bookTick(msg, null);
    }

    public static Ice.DispatchStatus ___bookTick(OnlineBook __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        // IceInternal.Incoming代表着当前RPC请求的网络通道
        // 从这个网络通道中读取RPC防范传入的参数
        IceInternal.BasicStream __is = __inS.startReadParams();
        // 构造具体的参数对象
        Message msg = null;
        // 执行反序列化逻辑，即将网络字节流变为具体的Java对象属性
        msg = Message.__read(__is, msg);
        __inS.endReadParams();
        // 调用用户实现的OnlineBook的具体业务接口，即_OnlineBookOperationsNC的实现方法
        Message __ret = __obj.bookTick(msg, __current);
        // 将结果协会到RPC请求的网络应答报文中
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        // 反序列化调用结果，写入网络通道，等待发送给客户端
        Message.__write(__os, __ret);
        __inS.__endWriteParams(true);
        // 完成调用
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "bookTick",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___bookTick(this, in, __current);
            }
            case 1:
            {
                return ___ice_id(this, in, __current);
            }
            case 2:
            {
                return ___ice_ids(this, in, __current);
            }
            case 3:
            {
                return ___ice_isA(this, in, __current);
            }
            case 4:
            {
                return ___ice_ping(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
