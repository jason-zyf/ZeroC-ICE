// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `entities_data_service.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package hjmos.EntitiesDataService;

public abstract class _IDataServiceAccessorDisp extends Ice.ObjectImpl implements IDataServiceAccessor
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::hjmos::EntitiesDataService::IDataServiceAccessor"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final void QueryEntitiesValue(String cbId, String interfaceId, LocatitionInfo info, String[] entitiesArray)
    {
        QueryEntitiesValue(cbId, interfaceId, info, entitiesArray, null);
    }

    public final void Register_async(AMD_IDataServiceAccessor_Register __cb, IDataUpdatorPrx cb)
    {
        Register_async(__cb, cb, null);
    }

    public final void UnSubscribe_async(AMD_IDataServiceAccessor_UnSubscribe __cb, String cbId)
    {
        UnSubscribe_async(__cb, cbId, null);
    }

    public final void UnSubscribeImpl_async(AMD_IDataServiceAccessor_UnSubscribeImpl __cb, String cbId, String interfaceId)
    {
        UnSubscribeImpl_async(__cb, cbId, interfaceId, null);
    }

    public static Ice.DispatchStatus ___Register(IDataServiceAccessor __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        IDataUpdatorPrx cb;
        cb = IDataUpdatorPrxHelper.__read(__is);
        __inS.endReadParams();
        _AMD_IDataServiceAccessor_Register __cb = new _AMD_IDataServiceAccessor_Register(__inS);
        try
        {
            __obj.Register_async(__cb, cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        catch(java.lang.Error ex)
        {
            __cb.__error(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___UnSubscribe(IDataServiceAccessor __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String cbId;
        cbId = __is.readString();
        __inS.endReadParams();
        _AMD_IDataServiceAccessor_UnSubscribe __cb = new _AMD_IDataServiceAccessor_UnSubscribe(__inS);
        try
        {
            __obj.UnSubscribe_async(__cb, cbId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        catch(java.lang.Error ex)
        {
            __cb.__error(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___UnSubscribeImpl(IDataServiceAccessor __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String cbId;
        String interfaceId;
        cbId = __is.readString();
        interfaceId = __is.readString();
        __inS.endReadParams();
        _AMD_IDataServiceAccessor_UnSubscribeImpl __cb = new _AMD_IDataServiceAccessor_UnSubscribeImpl(__inS);
        try
        {
            __obj.UnSubscribeImpl_async(__cb, cbId, interfaceId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        catch(java.lang.Error ex)
        {
            __cb.__error(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___QueryEntitiesValue(IDataServiceAccessor __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String cbId;
        String interfaceId;
        LocatitionInfo info = null;
        String[] entitiesArray;
        cbId = __is.readString();
        interfaceId = __is.readString();
        info = LocatitionInfo.__read(__is, info);
        entitiesArray = EntitiesArrayHelper.read(__is);
        __inS.endReadParams();
        __obj.QueryEntitiesValue(cbId, interfaceId, info, entitiesArray, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "QueryEntitiesValue",
        "Register",
        "UnSubscribe",
        "UnSubscribeImpl",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___QueryEntitiesValue(this, in, __current);
            }
            case 1:
            {
                return ___Register(this, in, __current);
            }
            case 2:
            {
                return ___UnSubscribe(this, in, __current);
            }
            case 3:
            {
                return ___UnSubscribeImpl(this, in, __current);
            }
            case 4:
            {
                return ___ice_id(this, in, __current);
            }
            case 5:
            {
                return ___ice_ids(this, in, __current);
            }
            case 6:
            {
                return ___ice_isA(this, in, __current);
            }
            case 7:
            {
                return ___ice_ping(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
